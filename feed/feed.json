{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "CONJUGATEBACID",
	"language": "en",
	"home_page_url": "https://conjugatebacid.vercel.app/yjdx/",
	"feed_url": "https://conjugatebacid.vercel.app/yjdx/feed/feed.json",
	"description": "The homogenous customised blog of Yeshua D&#39;Costa.",
	"author": {
		"name": "Yeshua D&#39;Costa",
		"url": "https://yjdx.netlify.app/"
	},
	"items": [
		{
			"id": "https://conjugatebacid.vercel.app/yjdx/blog/post4/",
			"url": "https://conjugatebacid.vercel.app/yjdx/blog/post4/",
			"title": "It&#39;s Y2K all over again",
			"content_html": "<h2 id=\"the-modern-iteration-of-y2k\" tabindex=\"-1\">The Modern Iteration of Y2K <a class=\"header-anchor\" href=\"https://conjugatebacid.vercel.app/yjdx/blog/post4/\">#</a></h2>\n<p>On 19 July, 2024, about 8.5 million computers around the globe running Microsoft Windows gave a very specific error message. Every single one of these machines contained higly sensitive information. This error affected Banks, Airline Companies and Government and Healthcare Departments.</p>\n<img src=\"https://conjugatebacid.vercel.app/yjdx/img/post4/winerror.jpg\" width=\"100%\">\n<p>The error was traced to a specialised Antivirus Program - Crowdstrike Falcon, which operates at the kernel level to prevent virus and malware attacks from spreading in a computer by terminating it before the attack even begins. A single bug in Crowdstrike Falcon caused the error at the kernel level component of Microsoft Windows.</p>\n<img src=\"https://conjugatebacid.vercel.app/yjdx/img/post4/crowdstrikefalcon.jpg\" width=\"100%\">\n<blockquote class=\"twitter-tweet\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">CrowdStrike is actively working with customers impacted by a defect found in a single content update for Windows hosts. Mac and Linux hosts are not impacted. This is not a security incident or cyberattack. The issue has been identified, isolated and a fix has been deployed. We…</p>&mdash; George Kurtz (@George_Kurtz) <a href=\"https://twitter.com/George_Kurtz/status/1814235001745027317?ref_src=twsrc%5Etfw\">July 19, 2024</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>`\n<p>An immediate fix from IT Admins was to login into these computers via 'Safe Mode,' and unroll the update from Crowdstrike. Later on, Microsoft releases recovery tool to help repair Windows machines hit by CrowdStrike issue. A patch was later deployed to all Windows Computers, probably to fix the vulnerablilty and prevent the isssue from recurring.</p>\n<p>This event was dubbed, 'The Modern Y2K,' due to the panic and disruption that it caused on a global scale which replicated the expectations of the Y2K on New Year's Eve, 1999.\nThe very fact that modern civilisation depends so heavily upon computers that a single bug in an antivirus program has enough to disrupt its normal course. This raised public concern and also gave rise to many memes.</p>\n<blockquote class=\"twitter-tweet\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Blue screen of death <a href=\"https://t.co/OgV0vbhAB8\">pic.twitter.com/OgV0vbhAB8</a></p>&mdash; Sir Doge of the Coin ⚔️ (@dogeofficialceo) <a href=\"https://twitter.com/dogeofficialceo/status/1814213241192829260?ref_src=twsrc%5Etfw\">July 19, 2024</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>On the contrary, Macintosh and Linux systems remained unaffected by the bug.</p>\n",
			"date_published": "2024-07-26T00:00:00Z"
		}
		,
		{
			"id": "https://conjugatebacid.vercel.app/yjdx/blog/post3/",
			"url": "https://conjugatebacid.vercel.app/yjdx/blog/post3/",
			"title": "A Dose of Stop Motion",
			"content_html": "<h2 id=\"an-attempt-to-replicate-some-simple-animation\" tabindex=\"-1\">An attempt to replicate some simple animation <a class=\"header-anchor\" href=\"https://conjugatebacid.vercel.app/yjdx/blog/post3/\">#</a></h2>\n<p>Stop Motion Animation is a technique to make a physically manipulated object appear to move on its own. It was pioneered by british animation company - Aardman Animation. They utilize plasticine (somewhat similar to clay) to mold humanoid models and have created some of the world's most known animated characters with the likes of 'Wallace and Gromit', 'Morph', and 'Chicken Run.'</p>\n<img src=\"https://conjugatebacid.vercel.app/yjdx/img/post3/wallaceandgromit.jpg\" width=\"100%\">\n<p>Their animation technique involves the use of high-end cameras, which instead of filming videos, they click pictures, with a slight overlay of the previous picture taken, for a good reason. The models are manually moved ever so slightly and a picture of the whole setup called a 'frame' is taken. The pictures are then placed in order of which they taken. This forms a illusion in the form of a video in such a way that these physical objects appear to move.</p>\n<blockquote>\n<p>THE SCIENCE BEHIND IT ALL: This animation technique is possible due to The After Image Effect in The Humna Eye, where each 'frame' of the video is retained in the eye for a longer period than it is visible on the screen.</p>\n</blockquote>\n<p>I have attempted to replicate this animation technique to relicate this effect. To demonstrate the simplicity of this technique, I have a rubix cube, a die cast car, a lamp and camera of a smartphone.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\" data-dnt=\"true\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">The Scrambled Battle <a href=\"https://t.co/rlLAnyJDoX\">pic.twitter.com/rlLAnyJDoX</a></p>&mdash; Yeshua D&#39;Costa (@conjugatebacid) <a href=\"https://twitter.com/conjugatebacid/status/1816089924594196791?ref_src=twsrc%5Etfw\">July 24, 2024</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>The plot of the video starts with the rubix cube trying to solve itself with any external interference, and ends with a die cast model drifting along the surface and somehow crashing into the rubix cube.</p>\n<p>So in this post, I have successfully created a stop-motion animation short which took me around an hour and a half to create and a few more minutes to edit the video with some music (Parody of the Sonng, 'U Can't Touch This.). Animation techniques such as these are widely utilized in advertisements in The United Kingdom and have a cult following on the internet so I see no reason for such animation to replaced by 3D Animation which falls into the domain of Disney's Pixar Animation Studios.</p>\n<img src=\"https://conjugatebacid.vercel.app/yjdx/img/post3/morph.jpg\" width=\"100%\">",
			"date_published": "2024-07-24T00:00:00Z"
		}
		,
		{
			"id": "https://conjugatebacid.vercel.app/yjdx/blog/post2/",
			"url": "https://conjugatebacid.vercel.app/yjdx/blog/post2/",
			"title": "Poem On Prayer",
			"content_html": "<h2 id=\"a-short-poem-on-prayer\" tabindex=\"-1\">A Short Poem on Prayer <a class=\"header-anchor\" href=\"https://conjugatebacid.vercel.app/yjdx/blog/post2/\">#</a></h2>\n<p><strong>Prayer</strong>, What a <em>beautiful</em> thing<br>\nRaid the <strong>devil</strong>, <em>victory</em> you shall bring;<br>\n<em>Abandon</em> your <strong>wordly addictions</strong><br>\n<em>Yearn</em> for <strong>God</strong>,<br>\nHe will <em>eradicate</em> your <strong>afflictions</strong>;<br>\n<em>Raise</em> up your problems,<br>\n<em><strong>Prayer helps with that</strong></em><br>\n<strong>Faithfulness</strong>, it <em>instills</em> in you,<br>\nCertainly <strong>not</strong> the spirit of a <em>brat.</em></p>\n<p>~Yeshua D'Costa</p>\n",
			"date_published": "2023-12-04T00:00:00Z"
		}
		,
		{
			"id": "https://conjugatebacid.vercel.app/yjdx/blog/post1/",
			"url": "https://conjugatebacid.vercel.app/yjdx/blog/post1/",
			"title": "The Impossible Conjecture",
			"content_html": "<h3 id=\"introduction\" tabindex=\"-1\">Introduction <a class=\"header-anchor\" href=\"https://conjugatebacid.vercel.app/yjdx/blog/post1/\">#</a></h3>\n<p>The Collatz Conjecture is an unsolved problem in mathematics. This conjecture is named after the mathematician Lothar Collatz, who introduced the idea in 1937. The conjecture also known as Syrucuse conjecture or problem.</p>\n<p><em>Take any positive integer n. If n is even then divide it by 2, else do &quot;triple plus one&quot; and get 3n+1. The conjecture is that for all numbers, this process converges to <strong>one</strong>.</em></p>\n<blockquote>\n<p>Paul Erdős said about the Collatz conjecture, &quot;Mathematics may not be ready for such problems.&quot;</p>\n</blockquote>\n<blockquote>\n<p>Jeffrey Lagarias stated that the Collatz conjecture &quot;is an extraordinarily difficult problem, completely out of reach of present day mathematics.&quot;</p>\n</blockquote>\n<p><strong>Implementation Of The Collatz Conjecture in C++</strong></p>\n<pre class=\"language-c\" tabindex=\"0\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\nusing namespace std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> numeral<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter the Numeral: \"</span><span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> numeral<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> MAX_ITERATIONS<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter the number of iterations of the sequence: \"</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> MAX_ITERATIONS<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">&lt;=</span>MAX_ITERATIONS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numeral<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If the numeral is even, divide it by 2</span>\n            numeral <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>numeral<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/2: \"</span> <span class=\"token operator\">&lt;&lt;</span> numeral <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numeral<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If the numeral is odd, multiply it by 3 and add 1</span>\n            numeral <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>numeral<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"3x+1: \"</span> <span class=\"token operator\">&lt;&lt;</span> numeral <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// The following code restricts the number of repetitions of the sequence `4, 2, 1`</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numeral <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The sequence `4, 2, 1` has been repeated \"</span> <span class=\"token operator\">&lt;&lt;</span> MAX_ITERATIONS <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" times!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The constant <code>MAX_ITERATIONS</code> controls the maximum number of times, the sequence <code>4, 2, 1</code> is repeated while the variable <code>count</code> stores the number of occurences of the number <code>1</code></p>\n<p>If the number is <em>even</em>, it is divided by <code>2</code>, its divisibility by <code>2</code> is proven by <code>numeral%2</code>, which in this case, should be equal to zero.</p>\n<p>If the number is <em>odd</em>, it is multiplied by <code>3</code> and '1' is added to the product, its divisibility by <code>2</code> in this case <code>numeral%2</code>, should not be equal to zero and should provide the remainder of the number on division by <code>2</code></p>\n<p><strong>Output of the C++ Code</strong></p>\n<p>For the following example, the number <code>10</code> has been used</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">Enter the Numeral: <span class=\"token number\">10</span>\nEnter the number of iterations of the sequence: <span class=\"token number\">3</span>\n/2: <span class=\"token number\">5.0</span>\n3x+1: <span class=\"token number\">16.0</span>\n/2: <span class=\"token number\">8.0</span>\n/2: <span class=\"token number\">4.0</span>\n/2: <span class=\"token number\">2.0</span>\n/2: <span class=\"token number\">1.0</span>\n3x+1: <span class=\"token number\">4.0</span>\n/2: <span class=\"token number\">2.0</span>\n/2: <span class=\"token number\">1.0</span>\n3x+1: <span class=\"token number\">4.0</span>\n/2: <span class=\"token number\">2.0</span>\n/2: <span class=\"token number\">1.0</span>\n3x+1: <span class=\"token number\">4.0</span>\n/2: <span class=\"token number\">2.0</span>\n/2: <span class=\"token number\">1.0</span>\nThe sequence <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">4</span>, <span class=\"token number\">2</span>, <span class=\"token number\">1</span><span class=\"token variable\">`</span></span> has been repeated <span class=\"token number\">3</span> times.</code></pre>\n",
			"date_published": "2023-10-29T00:00:00Z"
		}
		
	]
}
